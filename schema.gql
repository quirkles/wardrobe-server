# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  hello: String!
}

type Mutation {
  createGarment(input: CreateGarmentInput!): CreateGarmentResult!
  createUser(input: CreateUserInput!): CreateUserResult!
  loginUser(password: String!, email: String!): LoginUserResult!
}

union CreateGarmentResult = Garment | InvalidSubcategoryError | InvalidBrandError | InvalidOwnerError | UnauthorizedError | FallBackServerError

type Garment {
  id: ID!
  title: String!
  description: String!
  owner: User!
  brand: Brand!
  category: GarmentCategory!
  subCategory: GarmentSubCategory!
  images: [GarmentImage!]!
}

type User {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  garments: [Garment!]!
}

type Brand {
  id: ID!
  slug: String!
  name: String!
  garments: [Garment!]!
}

type GarmentCategory {
  id: ID!
  slug: String!
  name: String!
  subCategories: [GarmentSubCategory!]!
  garments: [Garment!]!
}

type GarmentSubCategory {
  id: ID!
  slug: String!
  name: String!
  parentCategory: GarmentCategory!
  garments: [Garment!]!
}

type GarmentImage {
  id: ID!
  imageUrl: String!
  garment: Garment!
}

type InvalidSubcategoryError {
  responseType: String!
  type: ErrorSource!
  reason: String!
}

# Either client or server
enum ErrorSource {
  ServerError
  ClientError
}

type InvalidBrandError {
  responseType: String!
  type: ErrorSource!
  reason: String!
}

type InvalidOwnerError {
  responseType: String!
  type: ErrorSource!
  reason: String!
}

type UnauthorizedError {
  responseType: String!
  type: String!
  reason: String!
  message: String!
}

type FallBackServerError {
  responseType: String!
  type: String!
  reason: String!
  message: String!
}

input CreateGarmentInput {
  ownerId: String!
  title: String!
  description: String!
  brandId: String!
  subCategoryId: String!
  imageUrls: [String!]
}

union CreateUserResult = User | DuplicateUserError | FallBackServerError

type DuplicateUserError {
  responseType: String!
  type: ErrorSource!
  reason: String!
}

input CreateUserInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
}

union LoginUserResult = UserAndToken | UserNotFoundError | FallBackServerError

type UserAndToken {
  user: User!
  token: String!
}

type UserNotFoundError {
  responseType: String!
  type: ErrorSource!
  reason: String!
}
